// Code generated by protoc-gen-go.
// source: types.proto
// DO NOT EDIT!

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	types.proto

It has these top-level messages:
	ContainerPort
	EnvironmentVar
	VolumeMount
	WaitingStatus
	RunningStatus
	TermStatus
	ContainerStatus
	ContainerInfo
	Container
	RBDVolumeSource
	PodVolume
	PodSpec
	PodStatus
	PodInfo
	ImageInfo
	PodInfoRequest
	PodInfoResponse
	PodListRequest
	PodListResult
	PodListResponse
	ContainerListRequest
	ContainerListResult
	ContainerListResponse
	ContainerInfoRequest
	ContainerInfoResponse
	VMListResult
	VMListRequest
	VMListResponse
	ImageListRequest
	ImageListResponse
	VMCreateRequest
	VMCreateResponse
	VMRemoveRequest
	VMRemoveResponse
	PodStartRequest
	PodStartResponse
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// Types definitions for HyperContainer
type ContainerPort struct {
	Name          string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	HostPort      int32  `protobuf:"varint,2,opt,name=hostPort" json:"hostPort,omitempty"`
	ContainerPort int32  `protobuf:"varint,3,opt,name=containerPort" json:"containerPort,omitempty"`
	Protocol      string `protobuf:"bytes,4,opt,name=protocol" json:"protocol,omitempty"`
	HostIP        string `protobuf:"bytes,5,opt,name=hostIP" json:"hostIP,omitempty"`
}

func (m *ContainerPort) Reset()                    { *m = ContainerPort{} }
func (m *ContainerPort) String() string            { return proto.CompactTextString(m) }
func (*ContainerPort) ProtoMessage()               {}
func (*ContainerPort) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type EnvironmentVar struct {
	Env   string `protobuf:"bytes,1,opt,name=env" json:"env,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *EnvironmentVar) Reset()                    { *m = EnvironmentVar{} }
func (m *EnvironmentVar) String() string            { return proto.CompactTextString(m) }
func (*EnvironmentVar) ProtoMessage()               {}
func (*EnvironmentVar) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type VolumeMount struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	MountPath string `protobuf:"bytes,2,opt,name=mountPath" json:"mountPath,omitempty"`
	ReadOnly  bool   `protobuf:"varint,3,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *VolumeMount) Reset()                    { *m = VolumeMount{} }
func (m *VolumeMount) String() string            { return proto.CompactTextString(m) }
func (*VolumeMount) ProtoMessage()               {}
func (*VolumeMount) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type WaitingStatus struct {
	Reason string `protobuf:"bytes,1,opt,name=reason" json:"reason,omitempty"`
}

func (m *WaitingStatus) Reset()                    { *m = WaitingStatus{} }
func (m *WaitingStatus) String() string            { return proto.CompactTextString(m) }
func (*WaitingStatus) ProtoMessage()               {}
func (*WaitingStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type RunningStatus struct {
	StartedAt string `protobuf:"bytes,1,opt,name=startedAt" json:"startedAt,omitempty"`
}

func (m *RunningStatus) Reset()                    { *m = RunningStatus{} }
func (m *RunningStatus) String() string            { return proto.CompactTextString(m) }
func (*RunningStatus) ProtoMessage()               {}
func (*RunningStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type TermStatus struct {
	ExitCode   int32  `protobuf:"varint,1,opt,name=exitCode" json:"exitCode,omitempty"`
	Reason     string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	Message    string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	StartedAt  string `protobuf:"bytes,4,opt,name=startedAt" json:"startedAt,omitempty"`
	FinishedAt string `protobuf:"bytes,5,opt,name=finishedAt" json:"finishedAt,omitempty"`
}

func (m *TermStatus) Reset()                    { *m = TermStatus{} }
func (m *TermStatus) String() string            { return proto.CompactTextString(m) }
func (*TermStatus) ProtoMessage()               {}
func (*TermStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type ContainerStatus struct {
	Name        string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ContainerID string         `protobuf:"bytes,2,opt,name=containerID" json:"containerID,omitempty"`
	Phase       string         `protobuf:"bytes,3,opt,name=phase" json:"phase,omitempty"`
	Waiting     *WaitingStatus `protobuf:"bytes,4,opt,name=waiting" json:"waiting,omitempty"`
	Running     *RunningStatus `protobuf:"bytes,5,opt,name=running" json:"running,omitempty"`
	Terminated  *TermStatus    `protobuf:"bytes,6,opt,name=terminated" json:"terminated,omitempty"`
}

func (m *ContainerStatus) Reset()                    { *m = ContainerStatus{} }
func (m *ContainerStatus) String() string            { return proto.CompactTextString(m) }
func (*ContainerStatus) ProtoMessage()               {}
func (*ContainerStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ContainerStatus) GetWaiting() *WaitingStatus {
	if m != nil {
		return m.Waiting
	}
	return nil
}

func (m *ContainerStatus) GetRunning() *RunningStatus {
	if m != nil {
		return m.Running
	}
	return nil
}

func (m *ContainerStatus) GetTerminated() *TermStatus {
	if m != nil {
		return m.Terminated
	}
	return nil
}

// TODO: embed Container message to avoid repetition
type ContainerInfo struct {
	Name            string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ContainerID     string            `protobuf:"bytes,2,opt,name=containerID" json:"containerID,omitempty"`
	Image           string            `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	ImageID         string            `protobuf:"bytes,4,opt,name=imageID" json:"imageID,omitempty"`
	Commands        []string          `protobuf:"bytes,5,rep,name=commands" json:"commands,omitempty"`
	Args            []string          `protobuf:"bytes,6,rep,name=args" json:"args,omitempty"`
	WorkingDir      string            `protobuf:"bytes,7,opt,name=workingDir" json:"workingDir,omitempty"`
	Ports           []*ContainerPort  `protobuf:"bytes,8,rep,name=ports" json:"ports,omitempty"`
	Env             []*EnvironmentVar `protobuf:"bytes,9,rep,name=env" json:"env,omitempty"`
	VolumeMounts    []*VolumeMount    `protobuf:"bytes,10,rep,name=volumeMounts" json:"volumeMounts,omitempty"`
	Tty             bool              `protobuf:"varint,11,opt,name=tty" json:"tty,omitempty"`
	ImagePullPolicy string            `protobuf:"bytes,12,opt,name=imagePullPolicy" json:"imagePullPolicy,omitempty"`
	PodID           string            `protobuf:"bytes,13,opt,name=podID" json:"podID,omitempty"`
	Status          *ContainerStatus  `protobuf:"bytes,14,opt,name=status" json:"status,omitempty"`
}

func (m *ContainerInfo) Reset()                    { *m = ContainerInfo{} }
func (m *ContainerInfo) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfo) ProtoMessage()               {}
func (*ContainerInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ContainerInfo) GetPorts() []*ContainerPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *ContainerInfo) GetEnv() []*EnvironmentVar {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *ContainerInfo) GetVolumeMounts() []*VolumeMount {
	if m != nil {
		return m.VolumeMounts
	}
	return nil
}

func (m *ContainerInfo) GetStatus() *ContainerStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type Container struct {
	Name            string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ContainerID     string            `protobuf:"bytes,2,opt,name=containerID" json:"containerID,omitempty"`
	Image           string            `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	ImageID         string            `protobuf:"bytes,4,opt,name=imageID" json:"imageID,omitempty"`
	Commands        []string          `protobuf:"bytes,5,rep,name=commands" json:"commands,omitempty"`
	Args            []string          `protobuf:"bytes,6,rep,name=args" json:"args,omitempty"`
	WorkingDir      string            `protobuf:"bytes,7,opt,name=workingDir" json:"workingDir,omitempty"`
	Ports           []*ContainerPort  `protobuf:"bytes,8,rep,name=ports" json:"ports,omitempty"`
	Env             []*EnvironmentVar `protobuf:"bytes,9,rep,name=env" json:"env,omitempty"`
	VolumeMounts    []*VolumeMount    `protobuf:"bytes,10,rep,name=volumeMounts" json:"volumeMounts,omitempty"`
	Tty             bool              `protobuf:"varint,11,opt,name=tty" json:"tty,omitempty"`
	ImagePullPolicy string            `protobuf:"bytes,12,opt,name=imagePullPolicy" json:"imagePullPolicy,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Container) GetPorts() []*ContainerPort {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *Container) GetEnv() []*EnvironmentVar {
	if m != nil {
		return m.Env
	}
	return nil
}

func (m *Container) GetVolumeMounts() []*VolumeMount {
	if m != nil {
		return m.VolumeMounts
	}
	return nil
}

type RBDVolumeSource struct {
	Monitors []string `protobuf:"bytes,1,rep,name=monitors" json:"monitors,omitempty"`
	Image    string   `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
	FsType   string   `protobuf:"bytes,3,opt,name=fsType" json:"fsType,omitempty"`
	Pool     string   `protobuf:"bytes,4,opt,name=pool" json:"pool,omitempty"`
	User     string   `protobuf:"bytes,5,opt,name=user" json:"user,omitempty"`
	Keyring  string   `protobuf:"bytes,6,opt,name=keyring" json:"keyring,omitempty"`
	ReadOnly bool     `protobuf:"varint,7,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *RBDVolumeSource) Reset()                    { *m = RBDVolumeSource{} }
func (m *RBDVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*RBDVolumeSource) ProtoMessage()               {}
func (*RBDVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type PodVolume struct {
	Name   string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Source string           `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	Driver string           `protobuf:"bytes,3,opt,name=driver" json:"driver,omitempty"`
	Rbd    *RBDVolumeSource `protobuf:"bytes,4,opt,name=rbd" json:"rbd,omitempty"`
}

func (m *PodVolume) Reset()                    { *m = PodVolume{} }
func (m *PodVolume) String() string            { return proto.CompactTextString(m) }
func (*PodVolume) ProtoMessage()               {}
func (*PodVolume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PodVolume) GetRbd() *RBDVolumeSource {
	if m != nil {
		return m.Rbd
	}
	return nil
}

type PodSpec struct {
	Volumes    []*PodVolume      `protobuf:"bytes,1,rep,name=volumes" json:"volumes,omitempty"`
	Containers []*Container      `protobuf:"bytes,2,rep,name=containers" json:"containers,omitempty"`
	Labels     map[string]string `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Vcpu       int32             `protobuf:"varint,4,opt,name=vcpu" json:"vcpu,omitempty"`
	Memory     int32             `protobuf:"varint,5,opt,name=memory" json:"memory,omitempty"`
}

func (m *PodSpec) Reset()                    { *m = PodSpec{} }
func (m *PodSpec) String() string            { return proto.CompactTextString(m) }
func (*PodSpec) ProtoMessage()               {}
func (*PodSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *PodSpec) GetVolumes() []*PodVolume {
	if m != nil {
		return m.Volumes
	}
	return nil
}

func (m *PodSpec) GetContainers() []*Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

func (m *PodSpec) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type PodStatus struct {
	Phase           string             `protobuf:"bytes,1,opt,name=phase" json:"phase,omitempty"`
	Message         string             `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	Reason          string             `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	HostIP          string             `protobuf:"bytes,4,opt,name=hostIP" json:"hostIP,omitempty"`
	PodIP           []string           `protobuf:"bytes,5,rep,name=podIP" json:"podIP,omitempty"`
	StartTime       string             `protobuf:"bytes,6,opt,name=startTime" json:"startTime,omitempty"`
	ContainerStatus []*ContainerStatus `protobuf:"bytes,7,rep,name=containerStatus" json:"containerStatus,omitempty"`
	FinishTime      string             `protobuf:"bytes,8,opt,name=finishTime" json:"finishTime,omitempty"`
}

func (m *PodStatus) Reset()                    { *m = PodStatus{} }
func (m *PodStatus) String() string            { return proto.CompactTextString(m) }
func (*PodStatus) ProtoMessage()               {}
func (*PodStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PodStatus) GetContainerStatus() []*ContainerStatus {
	if m != nil {
		return m.ContainerStatus
	}
	return nil
}

type PodInfo struct {
	Kind       string     `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	ApiVersion string     `protobuf:"bytes,2,opt,name=apiVersion" json:"apiVersion,omitempty"`
	Vm         string     `protobuf:"bytes,3,opt,name=vm" json:"vm,omitempty"`
	Spec       *PodSpec   `protobuf:"bytes,4,opt,name=spec" json:"spec,omitempty"`
	Status     *PodStatus `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
}

func (m *PodInfo) Reset()                    { *m = PodInfo{} }
func (m *PodInfo) String() string            { return proto.CompactTextString(m) }
func (*PodInfo) ProtoMessage()               {}
func (*PodInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *PodInfo) GetSpec() *PodSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PodInfo) GetStatus() *PodStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type ImageInfo struct {
	Id          string            `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ParentID    string            `protobuf:"bytes,2,opt,name=parentID" json:"parentID,omitempty"`
	RepoTags    []string          `protobuf:"bytes,3,rep,name=repoTags" json:"repoTags,omitempty"`
	RepoDigests []string          `protobuf:"bytes,4,rep,name=repoDigests" json:"repoDigests,omitempty"`
	Created     int64             `protobuf:"varint,5,opt,name=created" json:"created,omitempty"`
	VirtualSize int64             `protobuf:"varint,6,opt,name=virtualSize" json:"virtualSize,omitempty"`
	Labels      map[string]string `protobuf:"bytes,7,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ImageInfo) Reset()                    { *m = ImageInfo{} }
func (m *ImageInfo) String() string            { return proto.CompactTextString(m) }
func (*ImageInfo) ProtoMessage()               {}
func (*ImageInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ImageInfo) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type PodInfoRequest struct {
	PodID string `protobuf:"bytes,1,opt,name=podID" json:"podID,omitempty"`
}

func (m *PodInfoRequest) Reset()                    { *m = PodInfoRequest{} }
func (m *PodInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*PodInfoRequest) ProtoMessage()               {}
func (*PodInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type PodInfoResponse struct {
	PodInfo *PodInfo `protobuf:"bytes,1,opt,name=podInfo" json:"podInfo,omitempty"`
}

func (m *PodInfoResponse) Reset()                    { *m = PodInfoResponse{} }
func (m *PodInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*PodInfoResponse) ProtoMessage()               {}
func (*PodInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PodInfoResponse) GetPodInfo() *PodInfo {
	if m != nil {
		return m.PodInfo
	}
	return nil
}

type PodListRequest struct {
	PodID string `protobuf:"bytes,1,opt,name=podID" json:"podID,omitempty"`
	VmID  string `protobuf:"bytes,2,opt,name=vmID" json:"vmID,omitempty"`
}

func (m *PodListRequest) Reset()                    { *m = PodListRequest{} }
func (m *PodListRequest) String() string            { return proto.CompactTextString(m) }
func (*PodListRequest) ProtoMessage()               {}
func (*PodListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type PodListResult struct {
	PodID   string `protobuf:"bytes,1,opt,name=podID" json:"podID,omitempty"`
	PodName string `protobuf:"bytes,2,opt,name=podName" json:"podName,omitempty"`
	VmID    string `protobuf:"bytes,3,opt,name=vmID" json:"vmID,omitempty"`
	Status  string `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *PodListResult) Reset()                    { *m = PodListResult{} }
func (m *PodListResult) String() string            { return proto.CompactTextString(m) }
func (*PodListResult) ProtoMessage()               {}
func (*PodListResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type PodListResponse struct {
	PodList []*PodListResult `protobuf:"bytes,1,rep,name=podList" json:"podList,omitempty"`
}

func (m *PodListResponse) Reset()                    { *m = PodListResponse{} }
func (m *PodListResponse) String() string            { return proto.CompactTextString(m) }
func (*PodListResponse) ProtoMessage()               {}
func (*PodListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *PodListResponse) GetPodList() []*PodListResult {
	if m != nil {
		return m.PodList
	}
	return nil
}

type ContainerListRequest struct {
	PodID     string `protobuf:"bytes,1,opt,name=podID" json:"podID,omitempty"`
	VmID      string `protobuf:"bytes,2,opt,name=vmID" json:"vmID,omitempty"`
	Auxiliary bool   `protobuf:"varint,3,opt,name=auxiliary" json:"auxiliary,omitempty"`
}

func (m *ContainerListRequest) Reset()                    { *m = ContainerListRequest{} }
func (m *ContainerListRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainerListRequest) ProtoMessage()               {}
func (*ContainerListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type ContainerListResult struct {
	ContainerID   string `protobuf:"bytes,1,opt,name=containerID" json:"containerID,omitempty"`
	ContainerName string `protobuf:"bytes,2,opt,name=containerName" json:"containerName,omitempty"`
	PodID         string `protobuf:"bytes,3,opt,name=podID" json:"podID,omitempty"`
	Status        string `protobuf:"bytes,4,opt,name=status" json:"status,omitempty"`
}

func (m *ContainerListResult) Reset()                    { *m = ContainerListResult{} }
func (m *ContainerListResult) String() string            { return proto.CompactTextString(m) }
func (*ContainerListResult) ProtoMessage()               {}
func (*ContainerListResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

type ContainerListResponse struct {
	ContainerList []*ContainerListResult `protobuf:"bytes,1,rep,name=containerList" json:"containerList,omitempty"`
}

func (m *ContainerListResponse) Reset()                    { *m = ContainerListResponse{} }
func (m *ContainerListResponse) String() string            { return proto.CompactTextString(m) }
func (*ContainerListResponse) ProtoMessage()               {}
func (*ContainerListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ContainerListResponse) GetContainerList() []*ContainerListResult {
	if m != nil {
		return m.ContainerList
	}
	return nil
}

type ContainerInfoRequest struct {
	// container is the name or id of specified container
	Container string `protobuf:"bytes,1,opt,name=container" json:"container,omitempty"`
}

func (m *ContainerInfoRequest) Reset()                    { *m = ContainerInfoRequest{} }
func (m *ContainerInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfoRequest) ProtoMessage()               {}
func (*ContainerInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type ContainerInfoResponse struct {
	ContainerInfo *ContainerInfo `protobuf:"bytes,1,opt,name=containerInfo" json:"containerInfo,omitempty"`
}

func (m *ContainerInfoResponse) Reset()                    { *m = ContainerInfoResponse{} }
func (m *ContainerInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*ContainerInfoResponse) ProtoMessage()               {}
func (*ContainerInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ContainerInfoResponse) GetContainerInfo() *ContainerInfo {
	if m != nil {
		return m.ContainerInfo
	}
	return nil
}

type VMListResult struct {
	VmID   string `protobuf:"bytes,1,opt,name=vmID" json:"vmID,omitempty"`
	PodID  string `protobuf:"bytes,2,opt,name=podID" json:"podID,omitempty"`
	Status string `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
}

func (m *VMListResult) Reset()                    { *m = VMListResult{} }
func (m *VMListResult) String() string            { return proto.CompactTextString(m) }
func (*VMListResult) ProtoMessage()               {}
func (*VMListResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type VMListRequest struct {
	PodID string `protobuf:"bytes,1,opt,name=podID" json:"podID,omitempty"`
	VmID  string `protobuf:"bytes,2,opt,name=vmID" json:"vmID,omitempty"`
}

func (m *VMListRequest) Reset()                    { *m = VMListRequest{} }
func (m *VMListRequest) String() string            { return proto.CompactTextString(m) }
func (*VMListRequest) ProtoMessage()               {}
func (*VMListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type VMListResponse struct {
	VmList []*VMListResult `protobuf:"bytes,1,rep,name=vmList" json:"vmList,omitempty"`
}

func (m *VMListResponse) Reset()                    { *m = VMListResponse{} }
func (m *VMListResponse) String() string            { return proto.CompactTextString(m) }
func (*VMListResponse) ProtoMessage()               {}
func (*VMListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *VMListResponse) GetVmList() []*VMListResult {
	if m != nil {
		return m.VmList
	}
	return nil
}

type ImageListRequest struct {
	// filterArgs is a JSON-encoded set of filter arguments
	FilterArgs string `protobuf:"bytes,1,opt,name=filterArgs" json:"filterArgs,omitempty"`
	// filter is a shell glob string applied to repository names
	Filter string `protobuf:"bytes,2,opt,name=filter" json:"filter,omitempty"`
	// all controls whether all images in the graph are filtered, or just the heads
	All bool `protobuf:"varint,3,opt,name=all" json:"all,omitempty"`
}

func (m *ImageListRequest) Reset()                    { *m = ImageListRequest{} }
func (m *ImageListRequest) String() string            { return proto.CompactTextString(m) }
func (*ImageListRequest) ProtoMessage()               {}
func (*ImageListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

type ImageListResponse struct {
	ImageList []*ImageInfo `protobuf:"bytes,1,rep,name=imageList" json:"imageList,omitempty"`
}

func (m *ImageListResponse) Reset()                    { *m = ImageListResponse{} }
func (m *ImageListResponse) String() string            { return proto.CompactTextString(m) }
func (*ImageListResponse) ProtoMessage()               {}
func (*ImageListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ImageListResponse) GetImageList() []*ImageInfo {
	if m != nil {
		return m.ImageList
	}
	return nil
}

type VMCreateRequest struct {
	Cpu    int32 `protobuf:"varint,1,opt,name=cpu" json:"cpu,omitempty"`
	Memory int32 `protobuf:"varint,2,opt,name=memory" json:"memory,omitempty"`
}

func (m *VMCreateRequest) Reset()                    { *m = VMCreateRequest{} }
func (m *VMCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*VMCreateRequest) ProtoMessage()               {}
func (*VMCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

type VMCreateResponse struct {
	VmID string `protobuf:"bytes,1,opt,name=vmID" json:"vmID,omitempty"`
}

func (m *VMCreateResponse) Reset()                    { *m = VMCreateResponse{} }
func (m *VMCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*VMCreateResponse) ProtoMessage()               {}
func (*VMCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

type VMRemoveRequest struct {
	VmID string `protobuf:"bytes,1,opt,name=vmID" json:"vmID,omitempty"`
}

func (m *VMRemoveRequest) Reset()                    { *m = VMRemoveRequest{} }
func (m *VMRemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*VMRemoveRequest) ProtoMessage()               {}
func (*VMRemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

type VMRemoveResponse struct {
	Code  int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Cause string `protobuf:"bytes,2,opt,name=cause" json:"cause,omitempty"`
}

func (m *VMRemoveResponse) Reset()                    { *m = VMRemoveResponse{} }
func (m *VMRemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*VMRemoveResponse) ProtoMessage()               {}
func (*VMRemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

type PodStartRequest struct {
	PodId   string `protobuf:"bytes,1,opt,name=podId" json:"podId,omitempty"`
	VmId    string `protobuf:"bytes,2,opt,name=vmId" json:"vmId,omitempty"`
	Tag     string `protobuf:"bytes,3,opt,name=tag" json:"tag,omitempty"`
	Content []byte `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *PodStartRequest) Reset()                    { *m = PodStartRequest{} }
func (m *PodStartRequest) String() string            { return proto.CompactTextString(m) }
func (*PodStartRequest) ProtoMessage()               {}
func (*PodStartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

type PodStartResponse struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Cause   string `protobuf:"bytes,2,opt,name=cause" json:"cause,omitempty"`
	Content []byte `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *PodStartResponse) Reset()                    { *m = PodStartResponse{} }
func (m *PodStartResponse) String() string            { return proto.CompactTextString(m) }
func (*PodStartResponse) ProtoMessage()               {}
func (*PodStartResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func init() {
	proto.RegisterType((*ContainerPort)(nil), "types.ContainerPort")
	proto.RegisterType((*EnvironmentVar)(nil), "types.EnvironmentVar")
	proto.RegisterType((*VolumeMount)(nil), "types.VolumeMount")
	proto.RegisterType((*WaitingStatus)(nil), "types.WaitingStatus")
	proto.RegisterType((*RunningStatus)(nil), "types.RunningStatus")
	proto.RegisterType((*TermStatus)(nil), "types.TermStatus")
	proto.RegisterType((*ContainerStatus)(nil), "types.ContainerStatus")
	proto.RegisterType((*ContainerInfo)(nil), "types.ContainerInfo")
	proto.RegisterType((*Container)(nil), "types.Container")
	proto.RegisterType((*RBDVolumeSource)(nil), "types.RBDVolumeSource")
	proto.RegisterType((*PodVolume)(nil), "types.PodVolume")
	proto.RegisterType((*PodSpec)(nil), "types.PodSpec")
	proto.RegisterType((*PodStatus)(nil), "types.PodStatus")
	proto.RegisterType((*PodInfo)(nil), "types.PodInfo")
	proto.RegisterType((*ImageInfo)(nil), "types.ImageInfo")
	proto.RegisterType((*PodInfoRequest)(nil), "types.PodInfoRequest")
	proto.RegisterType((*PodInfoResponse)(nil), "types.PodInfoResponse")
	proto.RegisterType((*PodListRequest)(nil), "types.PodListRequest")
	proto.RegisterType((*PodListResult)(nil), "types.PodListResult")
	proto.RegisterType((*PodListResponse)(nil), "types.PodListResponse")
	proto.RegisterType((*ContainerListRequest)(nil), "types.ContainerListRequest")
	proto.RegisterType((*ContainerListResult)(nil), "types.ContainerListResult")
	proto.RegisterType((*ContainerListResponse)(nil), "types.ContainerListResponse")
	proto.RegisterType((*ContainerInfoRequest)(nil), "types.ContainerInfoRequest")
	proto.RegisterType((*ContainerInfoResponse)(nil), "types.ContainerInfoResponse")
	proto.RegisterType((*VMListResult)(nil), "types.VMListResult")
	proto.RegisterType((*VMListRequest)(nil), "types.VMListRequest")
	proto.RegisterType((*VMListResponse)(nil), "types.VMListResponse")
	proto.RegisterType((*ImageListRequest)(nil), "types.ImageListRequest")
	proto.RegisterType((*ImageListResponse)(nil), "types.ImageListResponse")
	proto.RegisterType((*VMCreateRequest)(nil), "types.VMCreateRequest")
	proto.RegisterType((*VMCreateResponse)(nil), "types.VMCreateResponse")
	proto.RegisterType((*VMRemoveRequest)(nil), "types.VMRemoveRequest")
	proto.RegisterType((*VMRemoveResponse)(nil), "types.VMRemoveResponse")
	proto.RegisterType((*PodStartRequest)(nil), "types.PodStartRequest")
	proto.RegisterType((*PodStartResponse)(nil), "types.PodStartResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for PublicAPI service

type PublicAPIClient interface {
	// PodList implements GET /list?item=pod
	PodList(ctx context.Context, in *PodListRequest, opts ...grpc.CallOption) (*PodListResponse, error)
	// TODO: PodCreate implements POST /pod/create
	// rpc PodCreate(PodCreateRequest) returns (PodCreateResponse) {}
	// PodInfo implements GET /pod/info
	PodInfo(ctx context.Context, in *PodInfoRequest, opts ...grpc.CallOption) (*PodInfoResponse, error)
	// ContainerList implements GET /list?item=container
	ContainerList(ctx context.Context, in *ContainerListRequest, opts ...grpc.CallOption) (*ContainerListResponse, error)
	// ContainerInfo implements GET /container/info
	ContainerInfo(ctx context.Context, in *ContainerInfoRequest, opts ...grpc.CallOption) (*ContainerInfoResponse, error)
	// ImageList implements GET /images/get
	ImageList(ctx context.Context, in *ImageListRequest, opts ...grpc.CallOption) (*ImageListResponse, error)
	// VMList implements GET /list?item=vm
	VMList(ctx context.Context, in *VMListRequest, opts ...grpc.CallOption) (*VMListResponse, error)
	// VMCreate implements POST /vm/create
	VMCreate(ctx context.Context, in *VMCreateRequest, opts ...grpc.CallOption) (*VMCreateResponse, error)
	// VMRemove implements DELETE /vm
	VMRemove(ctx context.Context, in *VMRemoveRequest, opts ...grpc.CallOption) (*VMRemoveResponse, error)
	// PodStart implements  POST   /pod/start
	PodStart(ctx context.Context, opts ...grpc.CallOption) (PublicAPI_PodStartClient, error)
}

type publicAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicAPIClient(cc *grpc.ClientConn) PublicAPIClient {
	return &publicAPIClient{cc}
}

func (c *publicAPIClient) PodList(ctx context.Context, in *PodListRequest, opts ...grpc.CallOption) (*PodListResponse, error) {
	out := new(PodListResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/PodList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) PodInfo(ctx context.Context, in *PodInfoRequest, opts ...grpc.CallOption) (*PodInfoResponse, error) {
	out := new(PodInfoResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/PodInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ContainerList(ctx context.Context, in *ContainerListRequest, opts ...grpc.CallOption) (*ContainerListResponse, error) {
	out := new(ContainerListResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ContainerList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ContainerInfo(ctx context.Context, in *ContainerInfoRequest, opts ...grpc.CallOption) (*ContainerInfoResponse, error) {
	out := new(ContainerInfoResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ContainerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ImageList(ctx context.Context, in *ImageListRequest, opts ...grpc.CallOption) (*ImageListResponse, error) {
	out := new(ImageListResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/ImageList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) VMList(ctx context.Context, in *VMListRequest, opts ...grpc.CallOption) (*VMListResponse, error) {
	out := new(VMListResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/VMList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) VMCreate(ctx context.Context, in *VMCreateRequest, opts ...grpc.CallOption) (*VMCreateResponse, error) {
	out := new(VMCreateResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/VMCreate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) VMRemove(ctx context.Context, in *VMRemoveRequest, opts ...grpc.CallOption) (*VMRemoveResponse, error) {
	out := new(VMRemoveResponse)
	err := grpc.Invoke(ctx, "/types.PublicAPI/VMRemove", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) PodStart(ctx context.Context, opts ...grpc.CallOption) (PublicAPI_PodStartClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PublicAPI_serviceDesc.Streams[0], c.cc, "/types.PublicAPI/PodStart", opts...)
	if err != nil {
		return nil, err
	}
	x := &publicAPIPodStartClient{stream}
	return x, nil
}

type PublicAPI_PodStartClient interface {
	Send(*PodStartRequest) error
	Recv() (*PodStartResponse, error)
	grpc.ClientStream
}

type publicAPIPodStartClient struct {
	grpc.ClientStream
}

func (x *publicAPIPodStartClient) Send(m *PodStartRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *publicAPIPodStartClient) Recv() (*PodStartResponse, error) {
	m := new(PodStartResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PublicAPI service

type PublicAPIServer interface {
	// PodList implements GET /list?item=pod
	PodList(context.Context, *PodListRequest) (*PodListResponse, error)
	// TODO: PodCreate implements POST /pod/create
	// rpc PodCreate(PodCreateRequest) returns (PodCreateResponse) {}
	// PodInfo implements GET /pod/info
	PodInfo(context.Context, *PodInfoRequest) (*PodInfoResponse, error)
	// ContainerList implements GET /list?item=container
	ContainerList(context.Context, *ContainerListRequest) (*ContainerListResponse, error)
	// ContainerInfo implements GET /container/info
	ContainerInfo(context.Context, *ContainerInfoRequest) (*ContainerInfoResponse, error)
	// ImageList implements GET /images/get
	ImageList(context.Context, *ImageListRequest) (*ImageListResponse, error)
	// VMList implements GET /list?item=vm
	VMList(context.Context, *VMListRequest) (*VMListResponse, error)
	// VMCreate implements POST /vm/create
	VMCreate(context.Context, *VMCreateRequest) (*VMCreateResponse, error)
	// VMRemove implements DELETE /vm
	VMRemove(context.Context, *VMRemoveRequest) (*VMRemoveResponse, error)
	// PodStart implements  POST   /pod/start
	PodStart(PublicAPI_PodStartServer) error
}

func RegisterPublicAPIServer(s *grpc.Server, srv PublicAPIServer) {
	s.RegisterService(&_PublicAPI_serviceDesc, srv)
}

func _PublicAPI_PodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).PodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/PodList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).PodList(ctx, req.(*PodListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_PodInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).PodInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/PodInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).PodInfo(ctx, req.(*PodInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ContainerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ContainerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ContainerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ContainerList(ctx, req.(*ContainerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ContainerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ContainerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ContainerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ContainerInfo(ctx, req.(*ContainerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ImageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ImageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/ImageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ImageList(ctx, req.(*ImageListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_VMList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).VMList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/VMList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).VMList(ctx, req.(*VMListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_VMCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).VMCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/VMCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).VMCreate(ctx, req.(*VMCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_VMRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VMRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).VMRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.PublicAPI/VMRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).VMRemove(ctx, req.(*VMRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_PodStart_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PublicAPIServer).PodStart(&publicAPIPodStartServer{stream})
}

type PublicAPI_PodStartServer interface {
	Send(*PodStartResponse) error
	Recv() (*PodStartRequest, error)
	grpc.ServerStream
}

type publicAPIPodStartServer struct {
	grpc.ServerStream
}

func (x *publicAPIPodStartServer) Send(m *PodStartResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *publicAPIPodStartServer) Recv() (*PodStartRequest, error) {
	m := new(PodStartRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PublicAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.PublicAPI",
	HandlerType: (*PublicAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PodList",
			Handler:    _PublicAPI_PodList_Handler,
		},
		{
			MethodName: "PodInfo",
			Handler:    _PublicAPI_PodInfo_Handler,
		},
		{
			MethodName: "ContainerList",
			Handler:    _PublicAPI_ContainerList_Handler,
		},
		{
			MethodName: "ContainerInfo",
			Handler:    _PublicAPI_ContainerInfo_Handler,
		},
		{
			MethodName: "ImageList",
			Handler:    _PublicAPI_ImageList_Handler,
		},
		{
			MethodName: "VMList",
			Handler:    _PublicAPI_VMList_Handler,
		},
		{
			MethodName: "VMCreate",
			Handler:    _PublicAPI_VMCreate_Handler,
		},
		{
			MethodName: "VMRemove",
			Handler:    _PublicAPI_VMRemove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PodStart",
			Handler:       _PublicAPI_PodStart_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 1650 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x58, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0xef, 0x7a, 0x1d, 0x3b, 0x1e, 0xc7, 0x49, 0x3a, 0x4d, 0xd2, 0x55, 0x5a, 0xfd, 0x55, 0x8d,
	0xfe, 0xd0, 0x08, 0x44, 0x54, 0x42, 0x05, 0x6d, 0xa1, 0x52, 0x43, 0xd2, 0x8b, 0x48, 0x2d, 0x58,
	0x93, 0x28, 0x08, 0x81, 0x90, 0x36, 0xf6, 0xd6, 0x59, 0x75, 0x3f, 0xcc, 0x7e, 0xb8, 0x35, 0x77,
	0x70, 0x09, 0x2f, 0x00, 0xe2, 0x8e, 0xb7, 0xe0, 0x3d, 0xb8, 0xe3, 0x25, 0x78, 0x04, 0xce, 0x9c,
	0xf9, 0xd8, 0xd9, 0x8d, 0x53, 0xa9, 0xe5, 0x82, 0x1b, 0xee, 0xe6, 0x9c, 0x3d, 0x67, 0xce, 0xef,
	0x7c, 0x8f, 0x4d, 0xfa, 0xc5, 0x7c, 0x1a, 0xe4, 0xbb, 0xd3, 0x2c, 0x2d, 0x52, 0xba, 0x84, 0x04,
	0xfb, 0xc5, 0x21, 0x83, 0x83, 0x34, 0x29, 0xfc, 0x30, 0x09, 0xb2, 0x61, 0x9a, 0x15, 0x94, 0x92,
	0x76, 0xe2, 0xc7, 0x81, 0xe7, 0xdc, 0x72, 0x76, 0x7a, 0x1c, 0xcf, 0x74, 0x9b, 0x2c, 0x9f, 0xa7,
	0x79, 0x21, 0xbe, 0x7b, 0x2d, 0xe0, 0x2f, 0x71, 0x43, 0xd3, 0xff, 0x93, 0xc1, 0xc8, 0xbe, 0xc0,
	0x73, 0x51, 0xa0, 0xce, 0x14, 0x37, 0xa0, 0xdd, 0x51, 0x1a, 0x79, 0x6d, 0xbc, 0xd9, 0xd0, 0x74,
	0x8b, 0x74, 0xc4, 0x6d, 0x47, 0x43, 0x6f, 0x09, 0xbf, 0x28, 0x8a, 0xdd, 0x23, 0xab, 0x8f, 0x93,
	0x59, 0x98, 0xa5, 0x49, 0x1c, 0x24, 0xc5, 0xa9, 0x9f, 0xd1, 0x75, 0xe2, 0x06, 0xc9, 0x4c, 0x41,
	0x13, 0x47, 0xba, 0x41, 0x96, 0x66, 0x7e, 0x54, 0x06, 0x08, 0xab, 0xc7, 0x25, 0xc1, 0xbe, 0x22,
	0xfd, 0xd3, 0x34, 0x2a, 0xe3, 0xe0, 0x69, 0x5a, 0x26, 0x8b, 0x5d, 0xba, 0x49, 0x7a, 0xb1, 0xf8,
	0x38, 0xf4, 0x8b, 0x73, 0xa5, 0x5c, 0x31, 0x04, 0xdc, 0x2c, 0xf0, 0xc7, 0x9f, 0x27, 0xd1, 0x1c,
	0xfd, 0x59, 0xe6, 0x86, 0x66, 0xb7, 0xc9, 0xe0, 0x0b, 0x3f, 0x2c, 0xc2, 0x64, 0x72, 0x5c, 0xf8,
	0x45, 0x99, 0x0b, 0xfc, 0xf0, 0x31, 0x4f, 0x13, 0x65, 0x40, 0x51, 0xec, 0x3d, 0x32, 0xe0, 0x65,
	0x92, 0x54, 0x82, 0x60, 0x33, 0x2f, 0xfc, 0xac, 0x08, 0xc6, 0xfb, 0x85, 0x92, 0xad, 0x18, 0xec,
	0x67, 0x87, 0x90, 0x93, 0x20, 0x8b, 0x95, 0x30, 0x40, 0x08, 0x5e, 0x86, 0xc5, 0x41, 0x3a, 0x96,
	0xc0, 0x21, 0xe6, 0x9a, 0xb6, 0x2c, 0xb6, 0x6c, 0x8b, 0xd4, 0x23, 0xdd, 0x38, 0xc8, 0x73, 0x7f,
	0x12, 0x20, 0xea, 0x1e, 0xd7, 0x64, 0xdd, 0x74, 0xbb, 0x61, 0x9a, 0xfe, 0x8f, 0x90, 0x67, 0x61,
	0x12, 0xe6, 0xe7, 0xf8, 0x59, 0x66, 0xc1, 0xe2, 0xb0, 0xbf, 0x1c, 0xb2, 0x66, 0xaa, 0x44, 0xe1,
	0x5b, 0x14, 0xd4, 0x5b, 0xa4, 0x6f, 0xd2, 0x7e, 0x74, 0xa8, 0xc0, 0xd9, 0x2c, 0x91, 0xaf, 0xe9,
	0xb9, 0x9f, 0x6b, 0x7c, 0x92, 0xa0, 0xbb, 0xa4, 0xfb, 0x42, 0x86, 0x14, 0xb1, 0xf5, 0xf7, 0x36,
	0x76, 0x65, 0xad, 0xd6, 0x02, 0xcd, 0xb5, 0x90, 0x90, 0xcf, 0x64, 0x64, 0x11, 0x6c, 0x25, 0x5f,
	0x8b, 0x37, 0xd7, 0x42, 0xf4, 0x7d, 0x42, 0x0a, 0x88, 0x6c, 0x98, 0xf8, 0xe0, 0xaf, 0xd7, 0x41,
	0x95, 0xab, 0x4a, 0xa5, 0x0a, 0x39, 0xb7, 0x84, 0xd8, 0x1f, 0xae, 0xd5, 0x18, 0x47, 0xc9, 0xb3,
	0xf4, 0xcd, 0x1d, 0x0e, 0xe3, 0x2a, 0x21, 0x92, 0x10, 0x89, 0xc2, 0x03, 0xe8, 0xc8, 0x64, 0x68,
	0x52, 0xa4, 0x7d, 0x94, 0xc6, 0xb1, 0x9f, 0x8c, 0x73, 0xf0, 0xcd, 0x15, 0x8d, 0xa2, 0x69, 0x81,
	0xc0, 0xcf, 0x26, 0x39, 0x38, 0x20, 0xf8, 0x78, 0x16, 0xa9, 0x7b, 0x91, 0x66, 0xcf, 0xc1, 0xcb,
	0xc3, 0x30, 0xf3, 0xba, 0x32, 0x75, 0x15, 0x87, 0xbe, 0x03, 0x01, 0x87, 0x06, 0xcc, 0xbd, 0x65,
	0x50, 0xaa, 0x02, 0x55, 0xeb, 0x79, 0x2e, 0x45, 0xe8, 0x6d, 0xd9, 0x5e, 0x3d, 0x94, 0xdc, 0x54,
	0x92, 0xf5, 0x16, 0x94, 0x5d, 0xf7, 0x21, 0x59, 0x99, 0x55, 0xfd, 0x95, 0x7b, 0x04, 0x35, 0xa8,
	0xd2, 0xb0, 0x5a, 0x8f, 0xd7, 0xe4, 0x44, 0xff, 0x16, 0xc5, 0xdc, 0xeb, 0x63, 0x47, 0x89, 0x23,
	0xdd, 0x21, 0x6b, 0xe8, 0xf9, 0xb0, 0x8c, 0xa2, 0x61, 0x1a, 0x85, 0xa3, 0xb9, 0xb7, 0x82, 0x3e,
	0x34, 0xd9, 0x58, 0x39, 0xe9, 0x18, 0x02, 0x36, 0x50, 0x95, 0x23, 0x08, 0xa8, 0x84, 0x4e, 0x8e,
	0xc9, 0xf3, 0x56, 0x31, 0xab, 0x5b, 0x4d, 0xff, 0x54, 0x6a, 0x95, 0x14, 0xfb, 0xd1, 0x25, 0x3d,
	0xf3, 0xed, 0xbf, 0x94, 0xfe, 0xab, 0x29, 0x65, 0xbf, 0xc3, 0x58, 0xe1, 0x9f, 0x1e, 0xca, 0xcb,
	0x8f, 0xd3, 0x32, 0x1b, 0xe1, 0xaa, 0x89, 0xd3, 0x24, 0x2c, 0xd2, 0x2c, 0x87, 0xb4, 0x60, 0xb0,
	0x34, 0x5d, 0x05, 0xbe, 0x65, 0x07, 0x1e, 0x86, 0xe1, 0xb3, 0xfc, 0x04, 0x60, 0xaa, 0x7c, 0x28,
	0x4a, 0x84, 0x76, 0x9a, 0x9a, 0x75, 0x83, 0x67, 0xc1, 0x2b, 0xf3, 0x20, 0x53, 0x23, 0x0e, 0xcf,
	0x22, 0x71, 0xcf, 0x83, 0x79, 0x26, 0x86, 0x49, 0x47, 0x26, 0x4e, 0x91, 0xb5, 0x2d, 0xd0, 0x6d,
	0x6c, 0x81, 0x39, 0xe9, 0x0d, 0xd3, 0xb1, 0x84, 0xbe, 0xb0, 0x8e, 0x00, 0x56, 0x8e, 0x2e, 0xe9,
	0x19, 0x2d, 0x29, 0xc1, 0x1f, 0x67, 0xe1, 0x0c, 0x40, 0x28, 0xb8, 0x92, 0x82, 0xb0, 0xb9, 0xd9,
	0xd9, 0x58, 0xcd, 0x3f, 0x5d, 0xc6, 0x8d, 0xe8, 0x70, 0x21, 0xc2, 0x7e, 0x68, 0x91, 0x2e, 0xd8,
	0x3e, 0x9e, 0x06, 0x23, 0xa8, 0x85, 0xae, 0x4c, 0x87, 0x8c, 0x56, 0x7f, 0x6f, 0x5d, 0x69, 0x1a,
	0x70, 0x5c, 0x0b, 0xd0, 0x3b, 0x84, 0x98, 0x32, 0xce, 0x01, 0x95, 0x2d, 0x6e, 0x8a, 0x87, 0x5b,
	0x32, 0x74, 0x8f, 0x74, 0x22, 0xff, 0x2c, 0x88, 0x72, 0xc0, 0x2a, 0xa4, 0xb7, 0xab, 0xcb, 0x85,
	0xf5, 0xdd, 0x27, 0xf8, 0xf1, 0x71, 0x52, 0x64, 0x73, 0xae, 0x24, 0x45, 0x2c, 0x66, 0xa3, 0x69,
	0x89, 0x8e, 0x2c, 0x71, 0x3c, 0x0b, 0x9f, 0xe3, 0x20, 0x4e, 0xb3, 0x39, 0x06, 0x7e, 0x89, 0x2b,
	0x6a, 0xfb, 0x3e, 0xe9, 0x5b, 0x57, 0x88, 0x5a, 0x82, 0xd0, 0xeb, 0xf5, 0x0e, 0xc7, 0xc5, 0xeb,
	0xfd, 0x41, 0xeb, 0x9e, 0xc3, 0xbe, 0x6f, 0x61, 0x02, 0xd4, 0x32, 0x32, 0x6b, 0xc5, 0xb1, 0xd7,
	0x8a, 0xb5, 0x0e, 0x5b, 0xf5, 0x75, 0x58, 0x2d, 0x50, 0xb7, 0xb6, 0x40, 0xab, 0xa7, 0x48, 0xdb,
	0x7e, 0x8a, 0xe8, 0xe1, 0x33, 0x54, 0xfd, 0x2b, 0x09, 0xb3, 0x54, 0x4f, 0x42, 0xc8, 0x7d, 0xc7,
	0x5a, 0xaa, 0x82, 0x41, 0x1f, 0x91, 0xb5, 0x51, 0x7d, 0x0a, 0x41, 0x11, 0xb9, 0xaf, 0x98, 0x51,
	0x4d, 0xf1, 0x6a, 0x2d, 0xa3, 0x81, 0x65, 0x7b, 0x2d, 0x0b, 0x0e, 0xfb, 0xd5, 0xc1, 0x42, 0xd0,
	0xdb, 0x09, 0xe6, 0xc3, 0x58, 0x97, 0xa0, 0x38, 0x0b, 0x7d, 0x7f, 0x1a, 0x9e, 0x42, 0x26, 0x43,
	0xf3, 0x54, 0xb0, 0x38, 0x74, 0x95, 0xb4, 0x66, 0xb1, 0x8a, 0x00, 0x9c, 0x28, 0x23, 0xed, 0x1c,
	0xd2, 0xaa, 0x6a, 0x70, 0xb5, 0x9e, 0x6c, 0x8e, 0xdf, 0xa0, 0x4c, 0xf5, 0xc0, 0x95, 0x9b, 0xd7,
	0xaa, 0xb7, 0xc6, 0xa8, 0xfd, 0x0d, 0x32, 0x74, 0x84, 0x23, 0x50, 0xe0, 0x03, 0x5b, 0xa1, 0x46,
	0x07, 0x27, 0x7c, 0x10, 0xfa, 0x19, 0x4c, 0x20, 0x33, 0x63, 0x0d, 0x2d, 0xfb, 0x6e, 0x9a, 0x9e,
	0xf8, 0x13, 0x59, 0x78, 0x3d, 0x6e, 0x68, 0x31, 0x9e, 0xc5, 0xf9, 0x30, 0x9c, 0x04, 0x39, 0x8c,
	0xa9, 0x36, 0x7e, 0xb6, 0x59, 0x22, 0xeb, 0x23, 0x48, 0xa7, 0xd8, 0xf4, 0x02, 0xa2, 0xcb, 0x35,
	0x29, 0x74, 0x61, 0xf0, 0x15, 0xa5, 0x1f, 0x1d, 0x87, 0xdf, 0xc9, 0x8c, 0xb9, 0xdc, 0x66, 0xd1,
	0xbb, 0xa6, 0xe0, 0x65, 0xaa, 0x6e, 0x2a, 0xef, 0x8c, 0x1f, 0x8b, 0x4a, 0xfe, 0x9f, 0x94, 0xf1,
	0xdb, 0x64, 0x55, 0x65, 0x90, 0x07, 0xdf, 0x96, 0x80, 0xbf, 0xda, 0x73, 0x8e, 0xb5, 0xe7, 0xd8,
	0xc7, 0x64, 0xcd, 0xc8, 0xe5, 0xd3, 0x34, 0x81, 0xea, 0xde, 0x21, 0xdd, 0xa9, 0x64, 0xa1, 0x68,
	0x2d, 0x61, 0x28, 0xa8, 0x3f, 0xb3, 0x07, 0x68, 0xe4, 0x49, 0x98, 0x17, 0xaf, 0x34, 0x82, 0xad,
	0x1b, 0x9b, 0x7c, 0xe0, 0x99, 0x3d, 0x27, 0x03, 0xa3, 0x9b, 0x97, 0xd1, 0x65, 0xaa, 0x1e, 0x82,
	0xf9, 0x4c, 0x0c, 0x41, 0xd5, 0x6a, 0x8a, 0x34, 0x97, 0xba, 0xd5, 0xa5, 0x38, 0x1b, 0x65, 0x11,
	0xa9, 0x36, 0x53, 0x25, 0xb3, 0x8f, 0x5e, 0x2a, 0x63, 0xd2, 0xcb, 0x5d, 0xbc, 0x58, 0xb0, 0xd4,
	0x80, 0xdb, 0xa8, 0xbc, 0xac, 0x50, 0x71, 0x2d, 0xc4, 0xbe, 0x21, 0x1b, 0xa6, 0xaf, 0xde, 0xc8,
	0x63, 0xd1, 0xd5, 0x7e, 0xf9, 0x32, 0x8c, 0x42, 0x3f, 0xd3, 0x8f, 0xff, 0x8a, 0xc1, 0x7e, 0x72,
	0xc8, 0xb5, 0x86, 0x01, 0x0c, 0x4b, 0xe3, 0xd9, 0xe0, 0x5c, 0x7c, 0x36, 0xd8, 0x3f, 0x94, 0xac,
	0x40, 0xd5, 0x99, 0x15, 0x4e, 0xd7, 0xc6, 0x79, 0x59, 0xc0, 0xbe, 0x24, 0x9b, 0x4d, 0x30, 0x32,
	0x6c, 0x8f, 0x2c, 0x63, 0x56, 0xf0, 0xb6, 0x9b, 0xa3, 0xc7, 0x0a, 0x61, 0x5d, 0x81, 0xdd, 0xb5,
	0x02, 0x69, 0xd7, 0x27, 0x84, 0xc7, 0x08, 0xea, 0x1f, 0x31, 0x86, 0xc1, 0x8e, 0x2d, 0x40, 0xb5,
	0x6a, 0x7d, 0x60, 0x01, 0xb2, 0x6a, 0xf6, 0xc2, 0xe3, 0x05, 0x95, 0xea, 0xa2, 0x6c, 0x48, 0x56,
	0x4e, 0x9f, 0x5a, 0xb1, 0xd6, 0x59, 0x73, 0xac, 0xac, 0x99, 0xb8, 0xb5, 0x16, 0xc7, 0xcd, 0xad,
	0xc5, 0xed, 0x3e, 0x19, 0xe8, 0x1b, 0x5f, 0xb7, 0x21, 0x1e, 0x92, 0x55, 0x03, 0x46, 0xba, 0xf6,
	0x2e, 0xe9, 0xcc, 0x62, 0x2b, 0xc8, 0xd7, 0xf4, 0xa3, 0xc9, 0xc2, 0xcc, 0x95, 0x08, 0xfb, 0x9a,
	0xac, 0xe3, 0x30, 0xb1, 0x8d, 0xe3, 0x9c, 0x8f, 0xe0, 0xc7, 0xc7, 0xbe, 0x78, 0x0a, 0x3a, 0x7a,
	0xce, 0x6b, 0x0e, 0xbe, 0x70, 0x90, 0xd2, 0x4f, 0x09, 0x49, 0x89, 0x41, 0xe3, 0x47, 0x91, 0xaa,
	0x51, 0x71, 0x64, 0x07, 0xe4, 0xaa, 0x75, 0xbb, 0x69, 0xa1, 0x5e, 0xa8, 0x99, 0x8d, 0x57, 0x82,
	0x99, 0x6b, 0xbc, 0x12, 0x11, 0xb3, 0xe6, 0xf4, 0xe9, 0x01, 0xce, 0x4c, 0x8d, 0x10, 0x2c, 0x89,
	0x9d, 0x2e, 0x7f, 0x87, 0xba, 0xf5, 0x95, 0xde, 0xb2, 0x57, 0x3a, 0x0c, 0xb4, 0xf5, 0x4a, 0x59,
	0x01, 0x58, 0x90, 0x2f, 0xf6, 0x96, 0x30, 0xc2, 0x41, 0x67, 0x66, 0x8c, 0x2c, 0x12, 0xfb, 0x44,
	0x5c, 0xa7, 0xc5, 0xaa, 0xeb, 0x46, 0xd5, 0xaf, 0x62, 0x3c, 0x8b, 0xfc, 0x8d, 0x7c, 0x78, 0xce,
	0xe9, 0xf4, 0x23, 0xc1, 0x26, 0x38, 0x4f, 0x8e, 0xc5, 0x4a, 0x6e, 0x24, 0x7a, 0x6c, 0x27, 0x7a,
	0xac, 0x4c, 0x8f, 0xad, 0x44, 0x8f, 0xf1, 0x65, 0xeb, 0x4f, 0x54, 0xe1, 0x88, 0x23, 0x6e, 0x16,
	0x28, 0x4c, 0x58, 0x52, 0xd8, 0x86, 0x2b, 0x5c, 0x93, 0xec, 0x94, 0xac, 0x57, 0x86, 0x5e, 0x17,
	0xa6, 0x7d, 0xaf, 0x5b, 0xbb, 0x77, 0xef, 0xcf, 0x36, 0xbc, 0x72, 0xca, 0x33, 0x78, 0x2d, 0xef,
	0x0f, 0x8f, 0xa0, 0x87, 0xba, 0x6a, 0xea, 0xd1, 0xcd, 0xe6, 0x14, 0x44, 0xef, 0xb6, 0xb7, 0x2e,
	0x0c, 0x47, 0xc4, 0xc2, 0xae, 0x28, 0x5d, 0x5c, 0xc5, 0x9b, 0x8d, 0x3d, 0x71, 0x51, 0xd7, 0xee,
	0x5c, 0xd0, 0x7d, 0x62, 0xfd, 0x14, 0x46, 0xeb, 0x37, 0x16, 0x8f, 0x11, 0x79, 0xcf, 0xcd, 0x4b,
	0x66, 0xcc, 0xa2, 0xdb, 0x10, 0xcf, 0x8d, 0x85, 0x33, 0xe0, 0xb2, 0xdb, 0x1a, 0xd8, 0x1e, 0xa9,
	0x47, 0x06, 0xe2, 0xba, 0x6e, 0x97, 0xb5, 0x8d, 0xc9, 0xbb, 0xf8, 0xc1, 0xdc, 0xf0, 0x11, 0xe9,
	0xc8, 0x4e, 0xa5, 0x1b, 0x8d, 0xc6, 0x95, 0xba, 0x9b, 0xcd, 0x76, 0xd6, 0x8a, 0x0f, 0xc9, 0xb2,
	0x2e, 0x75, 0xba, 0x65, 0x84, 0x6a, 0x8d, 0xb3, 0x7d, 0xfd, 0x02, 0xbf, 0xae, 0x2e, 0x4b, 0xdb,
	0x52, 0xaf, 0xb5, 0x84, 0xa5, 0x5e, 0xef, 0x01, 0x50, 0xdf, 0x27, 0xcb, 0xba, 0xe4, 0xe8, 0x56,
	0xed, 0x11, 0x66, 0x8a, 0xdd, 0xa8, 0x37, 0x6b, 0x93, 0x5d, 0xd9, 0x71, 0xee, 0x38, 0x67, 0x1d,
	0xfc, 0x0b, 0xee, 0x83, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xc8, 0xa9, 0x86, 0x19, 0x14,
	0x00, 0x00,
}
